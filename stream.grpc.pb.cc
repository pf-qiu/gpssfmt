// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: stream.proto

#include "stream.pb.h"
#include "stream.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace GpssCluster {

static const char* KafkaWorker_method_names[] = {
  "/GpssCluster.KafkaWorker/Add",
  "/GpssCluster.KafkaWorker/Start",
  "/GpssCluster.KafkaWorker/Stop",
  "/GpssCluster.KafkaWorker/Delete",
  "/GpssCluster.KafkaWorker/Consume",
  "/GpssCluster.KafkaWorker/Offset",
};

std::unique_ptr< KafkaWorker::Stub> KafkaWorker::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KafkaWorker::Stub> stub(new KafkaWorker::Stub(channel));
  return stub;
}

KafkaWorker::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Add_(KafkaWorker_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Start_(KafkaWorker_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stop_(KafkaWorker_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(KafkaWorker_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Consume_(KafkaWorker_method_names[4], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Offset_(KafkaWorker_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KafkaWorker::Stub::Add(::grpc::ClientContext* context, const ::GpssCluster::AddRequest& request, ::GpssCluster::AddResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Add_, context, request, response);
}

void KafkaWorker::Stub::experimental_async::Add(::grpc::ClientContext* context, const ::GpssCluster::AddRequest* request, ::GpssCluster::AddResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::GpssCluster::AddResponse>* KafkaWorker::Stub::AsyncAddRaw(::grpc::ClientContext* context, const ::GpssCluster::AddRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GpssCluster::AddResponse>::Create(channel_.get(), cq, rpcmethod_Add_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GpssCluster::AddResponse>* KafkaWorker::Stub::PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::GpssCluster::AddRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GpssCluster::AddResponse>::Create(channel_.get(), cq, rpcmethod_Add_, context, request, false);
}

::grpc::Status KafkaWorker::Stub::Start(::grpc::ClientContext* context, const ::GpssCluster::StartRequest& request, ::GpssCluster::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Start_, context, request, response);
}

void KafkaWorker::Stub::experimental_async::Start(::grpc::ClientContext* context, const ::GpssCluster::StartRequest* request, ::GpssCluster::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Start_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>* KafkaWorker::Stub::AsyncStartRaw(::grpc::ClientContext* context, const ::GpssCluster::StartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GpssCluster::Empty>::Create(channel_.get(), cq, rpcmethod_Start_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>* KafkaWorker::Stub::PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::GpssCluster::StartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GpssCluster::Empty>::Create(channel_.get(), cq, rpcmethod_Start_, context, request, false);
}

::grpc::Status KafkaWorker::Stub::Stop(::grpc::ClientContext* context, const ::GpssCluster::StopRequest& request, ::GpssCluster::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Stop_, context, request, response);
}

void KafkaWorker::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::GpssCluster::StopRequest* request, ::GpssCluster::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>* KafkaWorker::Stub::AsyncStopRaw(::grpc::ClientContext* context, const ::GpssCluster::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GpssCluster::Empty>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>* KafkaWorker::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::GpssCluster::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GpssCluster::Empty>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, false);
}

::grpc::Status KafkaWorker::Stub::Delete(::grpc::ClientContext* context, const ::GpssCluster::DeleteRequest& request, ::GpssCluster::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void KafkaWorker::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::GpssCluster::DeleteRequest* request, ::GpssCluster::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>* KafkaWorker::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::GpssCluster::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GpssCluster::Empty>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>* KafkaWorker::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::GpssCluster::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GpssCluster::Empty>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, false);
}

::grpc::ClientReader< ::GpssCluster::KafkaMessages>* KafkaWorker::Stub::ConsumeRaw(::grpc::ClientContext* context, const ::GpssCluster::ConsumeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::GpssCluster::KafkaMessages>::Create(channel_.get(), rpcmethod_Consume_, context, request);
}

void KafkaWorker::Stub::experimental_async::Consume(::grpc::ClientContext* context, ::GpssCluster::ConsumeRequest* request, ::grpc::experimental::ClientReadReactor< ::GpssCluster::KafkaMessages>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::GpssCluster::KafkaMessages>::Create(stub_->channel_.get(), stub_->rpcmethod_Consume_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::GpssCluster::KafkaMessages>* KafkaWorker::Stub::AsyncConsumeRaw(::grpc::ClientContext* context, const ::GpssCluster::ConsumeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::GpssCluster::KafkaMessages>::Create(channel_.get(), cq, rpcmethod_Consume_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::GpssCluster::KafkaMessages>* KafkaWorker::Stub::PrepareAsyncConsumeRaw(::grpc::ClientContext* context, const ::GpssCluster::ConsumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::GpssCluster::KafkaMessages>::Create(channel_.get(), cq, rpcmethod_Consume_, context, request, false, nullptr);
}

::grpc::Status KafkaWorker::Stub::Offset(::grpc::ClientContext* context, const ::GpssCluster::OffsetRequest& request, ::GpssCluster::OffsetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Offset_, context, request, response);
}

void KafkaWorker::Stub::experimental_async::Offset(::grpc::ClientContext* context, const ::GpssCluster::OffsetRequest* request, ::GpssCluster::OffsetResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Offset_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::GpssCluster::OffsetResponse>* KafkaWorker::Stub::AsyncOffsetRaw(::grpc::ClientContext* context, const ::GpssCluster::OffsetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GpssCluster::OffsetResponse>::Create(channel_.get(), cq, rpcmethod_Offset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GpssCluster::OffsetResponse>* KafkaWorker::Stub::PrepareAsyncOffsetRaw(::grpc::ClientContext* context, const ::GpssCluster::OffsetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GpssCluster::OffsetResponse>::Create(channel_.get(), cq, rpcmethod_Offset_, context, request, false);
}

KafkaWorker::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KafkaWorker_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KafkaWorker::Service, ::GpssCluster::AddRequest, ::GpssCluster::AddResponse>(
          std::mem_fn(&KafkaWorker::Service::Add), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KafkaWorker_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KafkaWorker::Service, ::GpssCluster::StartRequest, ::GpssCluster::Empty>(
          std::mem_fn(&KafkaWorker::Service::Start), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KafkaWorker_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KafkaWorker::Service, ::GpssCluster::StopRequest, ::GpssCluster::Empty>(
          std::mem_fn(&KafkaWorker::Service::Stop), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KafkaWorker_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KafkaWorker::Service, ::GpssCluster::DeleteRequest, ::GpssCluster::Empty>(
          std::mem_fn(&KafkaWorker::Service::Delete), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KafkaWorker_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< KafkaWorker::Service, ::GpssCluster::ConsumeRequest, ::GpssCluster::KafkaMessages>(
          std::mem_fn(&KafkaWorker::Service::Consume), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KafkaWorker_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KafkaWorker::Service, ::GpssCluster::OffsetRequest, ::GpssCluster::OffsetResponse>(
          std::mem_fn(&KafkaWorker::Service::Offset), this)));
}

KafkaWorker::Service::~Service() {
}

::grpc::Status KafkaWorker::Service::Add(::grpc::ServerContext* context, const ::GpssCluster::AddRequest* request, ::GpssCluster::AddResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KafkaWorker::Service::Start(::grpc::ServerContext* context, const ::GpssCluster::StartRequest* request, ::GpssCluster::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KafkaWorker::Service::Stop(::grpc::ServerContext* context, const ::GpssCluster::StopRequest* request, ::GpssCluster::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KafkaWorker::Service::Delete(::grpc::ServerContext* context, const ::GpssCluster::DeleteRequest* request, ::GpssCluster::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KafkaWorker::Service::Consume(::grpc::ServerContext* context, const ::GpssCluster::ConsumeRequest* request, ::grpc::ServerWriter< ::GpssCluster::KafkaMessages>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KafkaWorker::Service::Offset(::grpc::ServerContext* context, const ::GpssCluster::OffsetRequest* request, ::GpssCluster::OffsetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace GpssCluster

