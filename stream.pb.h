// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream.proto

#ifndef PROTOBUF_INCLUDED_stream_2eproto
#define PROTOBUF_INCLUDED_stream_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_stream_2eproto 

namespace protobuf_stream_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_stream_2eproto
namespace GpssCluster {
class AddRequest;
class AddRequestDefaultTypeInternal;
extern AddRequestDefaultTypeInternal _AddRequest_default_instance_;
class AddResponse;
class AddResponseDefaultTypeInternal;
extern AddResponseDefaultTypeInternal _AddResponse_default_instance_;
class ConsumeRequest;
class ConsumeRequestDefaultTypeInternal;
extern ConsumeRequestDefaultTypeInternal _ConsumeRequest_default_instance_;
class DeleteRequest;
class DeleteRequestDefaultTypeInternal;
extern DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class KafkaMessage;
class KafkaMessageDefaultTypeInternal;
extern KafkaMessageDefaultTypeInternal _KafkaMessage_default_instance_;
class KafkaMessages;
class KafkaMessagesDefaultTypeInternal;
extern KafkaMessagesDefaultTypeInternal _KafkaMessages_default_instance_;
class OffsetRequest;
class OffsetRequestDefaultTypeInternal;
extern OffsetRequestDefaultTypeInternal _OffsetRequest_default_instance_;
class OffsetResponse;
class OffsetResponseDefaultTypeInternal;
extern OffsetResponseDefaultTypeInternal _OffsetResponse_default_instance_;
class StartRequest;
class StartRequestDefaultTypeInternal;
extern StartRequestDefaultTypeInternal _StartRequest_default_instance_;
class StopRequest;
class StopRequestDefaultTypeInternal;
extern StopRequestDefaultTypeInternal _StopRequest_default_instance_;
}  // namespace GpssCluster
namespace google {
namespace protobuf {
template<> ::GpssCluster::AddRequest* Arena::CreateMaybeMessage<::GpssCluster::AddRequest>(Arena*);
template<> ::GpssCluster::AddResponse* Arena::CreateMaybeMessage<::GpssCluster::AddResponse>(Arena*);
template<> ::GpssCluster::ConsumeRequest* Arena::CreateMaybeMessage<::GpssCluster::ConsumeRequest>(Arena*);
template<> ::GpssCluster::DeleteRequest* Arena::CreateMaybeMessage<::GpssCluster::DeleteRequest>(Arena*);
template<> ::GpssCluster::Empty* Arena::CreateMaybeMessage<::GpssCluster::Empty>(Arena*);
template<> ::GpssCluster::KafkaMessage* Arena::CreateMaybeMessage<::GpssCluster::KafkaMessage>(Arena*);
template<> ::GpssCluster::KafkaMessages* Arena::CreateMaybeMessage<::GpssCluster::KafkaMessages>(Arena*);
template<> ::GpssCluster::OffsetRequest* Arena::CreateMaybeMessage<::GpssCluster::OffsetRequest>(Arena*);
template<> ::GpssCluster::OffsetResponse* Arena::CreateMaybeMessage<::GpssCluster::OffsetResponse>(Arena*);
template<> ::GpssCluster::StartRequest* Arena::CreateMaybeMessage<::GpssCluster::StartRequest>(Arena*);
template<> ::GpssCluster::StopRequest* Arena::CreateMaybeMessage<::GpssCluster::StopRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace GpssCluster {

// ===================================================================

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GpssCluster.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(NULL);
  }

  Empty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GpssCluster.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stream_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GpssCluster.AddRequest) */ {
 public:
  AddRequest();
  virtual ~AddRequest();

  AddRequest(const AddRequest& from);

  inline AddRequest& operator=(const AddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddRequest(AddRequest&& from) noexcept
    : AddRequest() {
    *this = ::std::move(from);
  }

  inline AddRequest& operator=(AddRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRequest* internal_default_instance() {
    return reinterpret_cast<const AddRequest*>(
               &_AddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AddRequest* other);
  friend void swap(AddRequest& a, AddRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddRequest* New() const final {
    return CreateMaybeMessage<AddRequest>(NULL);
  }

  AddRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddRequest& from);
  void MergeFrom(const AddRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // string Brokers = 2;
  void clear_brokers();
  static const int kBrokersFieldNumber = 2;
  const ::std::string& brokers() const;
  void set_brokers(const ::std::string& value);
  #if LANG_CXX11
  void set_brokers(::std::string&& value);
  #endif
  void set_brokers(const char* value);
  void set_brokers(const char* value, size_t size);
  ::std::string* mutable_brokers();
  ::std::string* release_brokers();
  void set_allocated_brokers(::std::string* brokers);

  // int64 Offset = 4;
  void clear_offset();
  static const int kOffsetFieldNumber = 4;
  ::google::protobuf::int64 offset() const;
  void set_offset(::google::protobuf::int64 value);

  // int32 PartitionID = 3;
  void clear_partitionid();
  static const int kPartitionIDFieldNumber = 3;
  ::google::protobuf::int32 partitionid() const;
  void set_partitionid(::google::protobuf::int32 value);

  // int32 BatchTime = 5;
  void clear_batchtime();
  static const int kBatchTimeFieldNumber = 5;
  ::google::protobuf::int32 batchtime() const;
  void set_batchtime(::google::protobuf::int32 value);

  // int32 BatchRow = 6;
  void clear_batchrow();
  static const int kBatchRowFieldNumber = 6;
  ::google::protobuf::int32 batchrow() const;
  void set_batchrow(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GpssCluster.AddRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr brokers_;
  ::google::protobuf::int64 offset_;
  ::google::protobuf::int32 partitionid_;
  ::google::protobuf::int32 batchtime_;
  ::google::protobuf::int32 batchrow_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stream_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GpssCluster.AddResponse) */ {
 public:
  AddResponse();
  virtual ~AddResponse();

  AddResponse(const AddResponse& from);

  inline AddResponse& operator=(const AddResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddResponse(AddResponse&& from) noexcept
    : AddResponse() {
    *this = ::std::move(from);
  }

  inline AddResponse& operator=(AddResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddResponse* internal_default_instance() {
    return reinterpret_cast<const AddResponse*>(
               &_AddResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AddResponse* other);
  friend void swap(AddResponse& a, AddResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddResponse* New() const final {
    return CreateMaybeMessage<AddResponse>(NULL);
  }

  AddResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddResponse& from);
  void MergeFrom(const AddResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:GpssCluster.AddResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stream_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KafkaMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GpssCluster.KafkaMessage) */ {
 public:
  KafkaMessage();
  virtual ~KafkaMessage();

  KafkaMessage(const KafkaMessage& from);

  inline KafkaMessage& operator=(const KafkaMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KafkaMessage(KafkaMessage&& from) noexcept
    : KafkaMessage() {
    *this = ::std::move(from);
  }

  inline KafkaMessage& operator=(KafkaMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KafkaMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KafkaMessage* internal_default_instance() {
    return reinterpret_cast<const KafkaMessage*>(
               &_KafkaMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(KafkaMessage* other);
  friend void swap(KafkaMessage& a, KafkaMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KafkaMessage* New() const final {
    return CreateMaybeMessage<KafkaMessage>(NULL);
  }

  KafkaMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KafkaMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KafkaMessage& from);
  void MergeFrom(const KafkaMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KafkaMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Payload = 1;
  void clear_payload();
  static const int kPayloadFieldNumber = 1;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // bytes Key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:GpssCluster.KafkaMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stream_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KafkaMessages : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GpssCluster.KafkaMessages) */ {
 public:
  KafkaMessages();
  virtual ~KafkaMessages();

  KafkaMessages(const KafkaMessages& from);

  inline KafkaMessages& operator=(const KafkaMessages& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KafkaMessages(KafkaMessages&& from) noexcept
    : KafkaMessages() {
    *this = ::std::move(from);
  }

  inline KafkaMessages& operator=(KafkaMessages&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KafkaMessages& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KafkaMessages* internal_default_instance() {
    return reinterpret_cast<const KafkaMessages*>(
               &_KafkaMessages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(KafkaMessages* other);
  friend void swap(KafkaMessages& a, KafkaMessages& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KafkaMessages* New() const final {
    return CreateMaybeMessage<KafkaMessages>(NULL);
  }

  KafkaMessages* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KafkaMessages>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KafkaMessages& from);
  void MergeFrom(const KafkaMessages& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KafkaMessages* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GpssCluster.KafkaMessage Messages = 1;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 1;
  ::GpssCluster::KafkaMessage* mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField< ::GpssCluster::KafkaMessage >*
      mutable_messages();
  const ::GpssCluster::KafkaMessage& messages(int index) const;
  ::GpssCluster::KafkaMessage* add_messages();
  const ::google::protobuf::RepeatedPtrField< ::GpssCluster::KafkaMessage >&
      messages() const;

  // @@protoc_insertion_point(class_scope:GpssCluster.KafkaMessages)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::GpssCluster::KafkaMessage > messages_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stream_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OffsetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GpssCluster.OffsetResponse) */ {
 public:
  OffsetResponse();
  virtual ~OffsetResponse();

  OffsetResponse(const OffsetResponse& from);

  inline OffsetResponse& operator=(const OffsetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OffsetResponse(OffsetResponse&& from) noexcept
    : OffsetResponse() {
    *this = ::std::move(from);
  }

  inline OffsetResponse& operator=(OffsetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OffsetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OffsetResponse* internal_default_instance() {
    return reinterpret_cast<const OffsetResponse*>(
               &_OffsetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(OffsetResponse* other);
  friend void swap(OffsetResponse& a, OffsetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OffsetResponse* New() const final {
    return CreateMaybeMessage<OffsetResponse>(NULL);
  }

  OffsetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OffsetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OffsetResponse& from);
  void MergeFrom(const OffsetResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OffsetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 Offset = 1;
  void clear_offset();
  static const int kOffsetFieldNumber = 1;
  ::google::protobuf::int64 offset() const;
  void set_offset(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GpssCluster.OffsetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 offset_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stream_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StartRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GpssCluster.StartRequest) */ {
 public:
  StartRequest();
  virtual ~StartRequest();

  StartRequest(const StartRequest& from);

  inline StartRequest& operator=(const StartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartRequest(StartRequest&& from) noexcept
    : StartRequest() {
    *this = ::std::move(from);
  }

  inline StartRequest& operator=(StartRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartRequest* internal_default_instance() {
    return reinterpret_cast<const StartRequest*>(
               &_StartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(StartRequest* other);
  friend void swap(StartRequest& a, StartRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartRequest* New() const final {
    return CreateMaybeMessage<StartRequest>(NULL);
  }

  StartRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StartRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StartRequest& from);
  void MergeFrom(const StartRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // int64 Rows = 3;
  void clear_rows();
  static const int kRowsFieldNumber = 3;
  ::google::protobuf::int64 rows() const;
  void set_rows(::google::protobuf::int64 value);

  // int32 MaxTime = 2;
  void clear_maxtime();
  static const int kMaxTimeFieldNumber = 2;
  ::google::protobuf::int32 maxtime() const;
  void set_maxtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GpssCluster.StartRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::int64 rows_;
  ::google::protobuf::int32 maxtime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stream_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StopRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GpssCluster.StopRequest) */ {
 public:
  StopRequest();
  virtual ~StopRequest();

  StopRequest(const StopRequest& from);

  inline StopRequest& operator=(const StopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopRequest(StopRequest&& from) noexcept
    : StopRequest() {
    *this = ::std::move(from);
  }

  inline StopRequest& operator=(StopRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StopRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopRequest* internal_default_instance() {
    return reinterpret_cast<const StopRequest*>(
               &_StopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(StopRequest* other);
  friend void swap(StopRequest& a, StopRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopRequest* New() const final {
    return CreateMaybeMessage<StopRequest>(NULL);
  }

  StopRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StopRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StopRequest& from);
  void MergeFrom(const StopRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:GpssCluster.StopRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stream_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GpssCluster.DeleteRequest) */ {
 public:
  DeleteRequest();
  virtual ~DeleteRequest();

  DeleteRequest(const DeleteRequest& from);

  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteRequest(DeleteRequest&& from) noexcept
    : DeleteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRequest& operator=(DeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRequest*>(
               &_DeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DeleteRequest* other);
  friend void swap(DeleteRequest& a, DeleteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteRequest* New() const final {
    return CreateMaybeMessage<DeleteRequest>(NULL);
  }

  DeleteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteRequest& from);
  void MergeFrom(const DeleteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:GpssCluster.DeleteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stream_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConsumeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GpssCluster.ConsumeRequest) */ {
 public:
  ConsumeRequest();
  virtual ~ConsumeRequest();

  ConsumeRequest(const ConsumeRequest& from);

  inline ConsumeRequest& operator=(const ConsumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConsumeRequest(ConsumeRequest&& from) noexcept
    : ConsumeRequest() {
    *this = ::std::move(from);
  }

  inline ConsumeRequest& operator=(ConsumeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsumeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsumeRequest* internal_default_instance() {
    return reinterpret_cast<const ConsumeRequest*>(
               &_ConsumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ConsumeRequest* other);
  friend void swap(ConsumeRequest& a, ConsumeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsumeRequest* New() const final {
    return CreateMaybeMessage<ConsumeRequest>(NULL);
  }

  ConsumeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConsumeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConsumeRequest& from);
  void MergeFrom(const ConsumeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsumeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:GpssCluster.ConsumeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stream_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OffsetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GpssCluster.OffsetRequest) */ {
 public:
  OffsetRequest();
  virtual ~OffsetRequest();

  OffsetRequest(const OffsetRequest& from);

  inline OffsetRequest& operator=(const OffsetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OffsetRequest(OffsetRequest&& from) noexcept
    : OffsetRequest() {
    *this = ::std::move(from);
  }

  inline OffsetRequest& operator=(OffsetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OffsetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OffsetRequest* internal_default_instance() {
    return reinterpret_cast<const OffsetRequest*>(
               &_OffsetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(OffsetRequest* other);
  friend void swap(OffsetRequest& a, OffsetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OffsetRequest* New() const final {
    return CreateMaybeMessage<OffsetRequest>(NULL);
  }

  OffsetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OffsetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OffsetRequest& from);
  void MergeFrom(const OffsetRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OffsetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:GpssCluster.OffsetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stream_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// AddRequest

// string Topic = 1;
inline void AddRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddRequest::topic() const {
  // @@protoc_insertion_point(field_get:GpssCluster.AddRequest.Topic)
  return topic_.GetNoArena();
}
inline void AddRequest::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GpssCluster.AddRequest.Topic)
}
#if LANG_CXX11
inline void AddRequest::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GpssCluster.AddRequest.Topic)
}
#endif
inline void AddRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GpssCluster.AddRequest.Topic)
}
inline void AddRequest::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GpssCluster.AddRequest.Topic)
}
inline ::std::string* AddRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:GpssCluster.AddRequest.Topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddRequest::release_topic() {
  // @@protoc_insertion_point(field_release:GpssCluster.AddRequest.Topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:GpssCluster.AddRequest.Topic)
}

// string Brokers = 2;
inline void AddRequest::clear_brokers() {
  brokers_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddRequest::brokers() const {
  // @@protoc_insertion_point(field_get:GpssCluster.AddRequest.Brokers)
  return brokers_.GetNoArena();
}
inline void AddRequest::set_brokers(const ::std::string& value) {
  
  brokers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GpssCluster.AddRequest.Brokers)
}
#if LANG_CXX11
inline void AddRequest::set_brokers(::std::string&& value) {
  
  brokers_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GpssCluster.AddRequest.Brokers)
}
#endif
inline void AddRequest::set_brokers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  brokers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GpssCluster.AddRequest.Brokers)
}
inline void AddRequest::set_brokers(const char* value, size_t size) {
  
  brokers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GpssCluster.AddRequest.Brokers)
}
inline ::std::string* AddRequest::mutable_brokers() {
  
  // @@protoc_insertion_point(field_mutable:GpssCluster.AddRequest.Brokers)
  return brokers_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddRequest::release_brokers() {
  // @@protoc_insertion_point(field_release:GpssCluster.AddRequest.Brokers)
  
  return brokers_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddRequest::set_allocated_brokers(::std::string* brokers) {
  if (brokers != NULL) {
    
  } else {
    
  }
  brokers_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokers);
  // @@protoc_insertion_point(field_set_allocated:GpssCluster.AddRequest.Brokers)
}

// int32 PartitionID = 3;
inline void AddRequest::clear_partitionid() {
  partitionid_ = 0;
}
inline ::google::protobuf::int32 AddRequest::partitionid() const {
  // @@protoc_insertion_point(field_get:GpssCluster.AddRequest.PartitionID)
  return partitionid_;
}
inline void AddRequest::set_partitionid(::google::protobuf::int32 value) {
  
  partitionid_ = value;
  // @@protoc_insertion_point(field_set:GpssCluster.AddRequest.PartitionID)
}

// int64 Offset = 4;
inline void AddRequest::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AddRequest::offset() const {
  // @@protoc_insertion_point(field_get:GpssCluster.AddRequest.Offset)
  return offset_;
}
inline void AddRequest::set_offset(::google::protobuf::int64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:GpssCluster.AddRequest.Offset)
}

// int32 BatchTime = 5;
inline void AddRequest::clear_batchtime() {
  batchtime_ = 0;
}
inline ::google::protobuf::int32 AddRequest::batchtime() const {
  // @@protoc_insertion_point(field_get:GpssCluster.AddRequest.BatchTime)
  return batchtime_;
}
inline void AddRequest::set_batchtime(::google::protobuf::int32 value) {
  
  batchtime_ = value;
  // @@protoc_insertion_point(field_set:GpssCluster.AddRequest.BatchTime)
}

// int32 BatchRow = 6;
inline void AddRequest::clear_batchrow() {
  batchrow_ = 0;
}
inline ::google::protobuf::int32 AddRequest::batchrow() const {
  // @@protoc_insertion_point(field_get:GpssCluster.AddRequest.BatchRow)
  return batchrow_;
}
inline void AddRequest::set_batchrow(::google::protobuf::int32 value) {
  
  batchrow_ = value;
  // @@protoc_insertion_point(field_set:GpssCluster.AddRequest.BatchRow)
}

// -------------------------------------------------------------------

// AddResponse

// string ID = 1;
inline void AddResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddResponse::id() const {
  // @@protoc_insertion_point(field_get:GpssCluster.AddResponse.ID)
  return id_.GetNoArena();
}
inline void AddResponse::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GpssCluster.AddResponse.ID)
}
#if LANG_CXX11
inline void AddResponse::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GpssCluster.AddResponse.ID)
}
#endif
inline void AddResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GpssCluster.AddResponse.ID)
}
inline void AddResponse::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GpssCluster.AddResponse.ID)
}
inline ::std::string* AddResponse::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:GpssCluster.AddResponse.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddResponse::release_id() {
  // @@protoc_insertion_point(field_release:GpssCluster.AddResponse.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:GpssCluster.AddResponse.ID)
}

// -------------------------------------------------------------------

// KafkaMessage

// bytes Payload = 1;
inline void KafkaMessage::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KafkaMessage::payload() const {
  // @@protoc_insertion_point(field_get:GpssCluster.KafkaMessage.Payload)
  return payload_.GetNoArena();
}
inline void KafkaMessage::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GpssCluster.KafkaMessage.Payload)
}
#if LANG_CXX11
inline void KafkaMessage::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GpssCluster.KafkaMessage.Payload)
}
#endif
inline void KafkaMessage::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GpssCluster.KafkaMessage.Payload)
}
inline void KafkaMessage::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GpssCluster.KafkaMessage.Payload)
}
inline ::std::string* KafkaMessage::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:GpssCluster.KafkaMessage.Payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KafkaMessage::release_payload() {
  // @@protoc_insertion_point(field_release:GpssCluster.KafkaMessage.Payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KafkaMessage::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:GpssCluster.KafkaMessage.Payload)
}

// bytes Key = 2;
inline void KafkaMessage::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KafkaMessage::key() const {
  // @@protoc_insertion_point(field_get:GpssCluster.KafkaMessage.Key)
  return key_.GetNoArena();
}
inline void KafkaMessage::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GpssCluster.KafkaMessage.Key)
}
#if LANG_CXX11
inline void KafkaMessage::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GpssCluster.KafkaMessage.Key)
}
#endif
inline void KafkaMessage::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GpssCluster.KafkaMessage.Key)
}
inline void KafkaMessage::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GpssCluster.KafkaMessage.Key)
}
inline ::std::string* KafkaMessage::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:GpssCluster.KafkaMessage.Key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KafkaMessage::release_key() {
  // @@protoc_insertion_point(field_release:GpssCluster.KafkaMessage.Key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KafkaMessage::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:GpssCluster.KafkaMessage.Key)
}

// -------------------------------------------------------------------

// KafkaMessages

// repeated .GpssCluster.KafkaMessage Messages = 1;
inline int KafkaMessages::messages_size() const {
  return messages_.size();
}
inline void KafkaMessages::clear_messages() {
  messages_.Clear();
}
inline ::GpssCluster::KafkaMessage* KafkaMessages::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:GpssCluster.KafkaMessages.Messages)
  return messages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::GpssCluster::KafkaMessage >*
KafkaMessages::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:GpssCluster.KafkaMessages.Messages)
  return &messages_;
}
inline const ::GpssCluster::KafkaMessage& KafkaMessages::messages(int index) const {
  // @@protoc_insertion_point(field_get:GpssCluster.KafkaMessages.Messages)
  return messages_.Get(index);
}
inline ::GpssCluster::KafkaMessage* KafkaMessages::add_messages() {
  // @@protoc_insertion_point(field_add:GpssCluster.KafkaMessages.Messages)
  return messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GpssCluster::KafkaMessage >&
KafkaMessages::messages() const {
  // @@protoc_insertion_point(field_list:GpssCluster.KafkaMessages.Messages)
  return messages_;
}

// -------------------------------------------------------------------

// OffsetResponse

// int64 Offset = 1;
inline void OffsetResponse::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 OffsetResponse::offset() const {
  // @@protoc_insertion_point(field_get:GpssCluster.OffsetResponse.Offset)
  return offset_;
}
inline void OffsetResponse::set_offset(::google::protobuf::int64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:GpssCluster.OffsetResponse.Offset)
}

// -------------------------------------------------------------------

// StartRequest

// string ID = 1;
inline void StartRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartRequest::id() const {
  // @@protoc_insertion_point(field_get:GpssCluster.StartRequest.ID)
  return id_.GetNoArena();
}
inline void StartRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GpssCluster.StartRequest.ID)
}
#if LANG_CXX11
inline void StartRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GpssCluster.StartRequest.ID)
}
#endif
inline void StartRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GpssCluster.StartRequest.ID)
}
inline void StartRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GpssCluster.StartRequest.ID)
}
inline ::std::string* StartRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:GpssCluster.StartRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartRequest::release_id() {
  // @@protoc_insertion_point(field_release:GpssCluster.StartRequest.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:GpssCluster.StartRequest.ID)
}

// int32 MaxTime = 2;
inline void StartRequest::clear_maxtime() {
  maxtime_ = 0;
}
inline ::google::protobuf::int32 StartRequest::maxtime() const {
  // @@protoc_insertion_point(field_get:GpssCluster.StartRequest.MaxTime)
  return maxtime_;
}
inline void StartRequest::set_maxtime(::google::protobuf::int32 value) {
  
  maxtime_ = value;
  // @@protoc_insertion_point(field_set:GpssCluster.StartRequest.MaxTime)
}

// int64 Rows = 3;
inline void StartRequest::clear_rows() {
  rows_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 StartRequest::rows() const {
  // @@protoc_insertion_point(field_get:GpssCluster.StartRequest.Rows)
  return rows_;
}
inline void StartRequest::set_rows(::google::protobuf::int64 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:GpssCluster.StartRequest.Rows)
}

// -------------------------------------------------------------------

// StopRequest

// string ID = 1;
inline void StopRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StopRequest::id() const {
  // @@protoc_insertion_point(field_get:GpssCluster.StopRequest.ID)
  return id_.GetNoArena();
}
inline void StopRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GpssCluster.StopRequest.ID)
}
#if LANG_CXX11
inline void StopRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GpssCluster.StopRequest.ID)
}
#endif
inline void StopRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GpssCluster.StopRequest.ID)
}
inline void StopRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GpssCluster.StopRequest.ID)
}
inline ::std::string* StopRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:GpssCluster.StopRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopRequest::release_id() {
  // @@protoc_insertion_point(field_release:GpssCluster.StopRequest.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:GpssCluster.StopRequest.ID)
}

// -------------------------------------------------------------------

// DeleteRequest

// string ID = 1;
inline void DeleteRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteRequest::id() const {
  // @@protoc_insertion_point(field_get:GpssCluster.DeleteRequest.ID)
  return id_.GetNoArena();
}
inline void DeleteRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GpssCluster.DeleteRequest.ID)
}
#if LANG_CXX11
inline void DeleteRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GpssCluster.DeleteRequest.ID)
}
#endif
inline void DeleteRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GpssCluster.DeleteRequest.ID)
}
inline void DeleteRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GpssCluster.DeleteRequest.ID)
}
inline ::std::string* DeleteRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:GpssCluster.DeleteRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteRequest::release_id() {
  // @@protoc_insertion_point(field_release:GpssCluster.DeleteRequest.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:GpssCluster.DeleteRequest.ID)
}

// -------------------------------------------------------------------

// ConsumeRequest

// string ID = 1;
inline void ConsumeRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConsumeRequest::id() const {
  // @@protoc_insertion_point(field_get:GpssCluster.ConsumeRequest.ID)
  return id_.GetNoArena();
}
inline void ConsumeRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GpssCluster.ConsumeRequest.ID)
}
#if LANG_CXX11
inline void ConsumeRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GpssCluster.ConsumeRequest.ID)
}
#endif
inline void ConsumeRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GpssCluster.ConsumeRequest.ID)
}
inline void ConsumeRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GpssCluster.ConsumeRequest.ID)
}
inline ::std::string* ConsumeRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:GpssCluster.ConsumeRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConsumeRequest::release_id() {
  // @@protoc_insertion_point(field_release:GpssCluster.ConsumeRequest.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConsumeRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:GpssCluster.ConsumeRequest.ID)
}

// -------------------------------------------------------------------

// OffsetRequest

// string ID = 1;
inline void OffsetRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OffsetRequest::id() const {
  // @@protoc_insertion_point(field_get:GpssCluster.OffsetRequest.ID)
  return id_.GetNoArena();
}
inline void OffsetRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GpssCluster.OffsetRequest.ID)
}
#if LANG_CXX11
inline void OffsetRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GpssCluster.OffsetRequest.ID)
}
#endif
inline void OffsetRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GpssCluster.OffsetRequest.ID)
}
inline void OffsetRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GpssCluster.OffsetRequest.ID)
}
inline ::std::string* OffsetRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:GpssCluster.OffsetRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OffsetRequest::release_id() {
  // @@protoc_insertion_point(field_release:GpssCluster.OffsetRequest.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OffsetRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:GpssCluster.OffsetRequest.ID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GpssCluster

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_stream_2eproto
