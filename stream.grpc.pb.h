// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: stream.proto
#ifndef GRPC_stream_2eproto__INCLUDED
#define GRPC_stream_2eproto__INCLUDED

#include "stream.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace GpssCluster {

class KafkaWorker final {
 public:
  static constexpr char const* service_full_name() {
    return "GpssCluster.KafkaWorker";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Add(::grpc::ClientContext* context, const ::GpssCluster::AddRequest& request, ::GpssCluster::AddResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::AddResponse>> AsyncAdd(::grpc::ClientContext* context, const ::GpssCluster::AddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::AddResponse>>(AsyncAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::AddResponse>> PrepareAsyncAdd(::grpc::ClientContext* context, const ::GpssCluster::AddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::AddResponse>>(PrepareAsyncAddRaw(context, request, cq));
    }
    virtual ::grpc::Status Start(::grpc::ClientContext* context, const ::GpssCluster::StartRequest& request, ::GpssCluster::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::Empty>> AsyncStart(::grpc::ClientContext* context, const ::GpssCluster::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::Empty>>(AsyncStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::Empty>> PrepareAsyncStart(::grpc::ClientContext* context, const ::GpssCluster::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::Empty>>(PrepareAsyncStartRaw(context, request, cq));
    }
    virtual ::grpc::Status Stop(::grpc::ClientContext* context, const ::GpssCluster::StopRequest& request, ::GpssCluster::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::Empty>> AsyncStop(::grpc::ClientContext* context, const ::GpssCluster::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::Empty>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::Empty>> PrepareAsyncStop(::grpc::ClientContext* context, const ::GpssCluster::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::Empty>>(PrepareAsyncStopRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::GpssCluster::DeleteRequest& request, ::GpssCluster::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::Empty>> AsyncDelete(::grpc::ClientContext* context, const ::GpssCluster::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::Empty>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::Empty>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::GpssCluster::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::Empty>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::GpssCluster::KafkaMessages>> Consume(::grpc::ClientContext* context, const ::GpssCluster::ConsumeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::GpssCluster::KafkaMessages>>(ConsumeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GpssCluster::KafkaMessages>> AsyncConsume(::grpc::ClientContext* context, const ::GpssCluster::ConsumeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GpssCluster::KafkaMessages>>(AsyncConsumeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GpssCluster::KafkaMessages>> PrepareAsyncConsume(::grpc::ClientContext* context, const ::GpssCluster::ConsumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GpssCluster::KafkaMessages>>(PrepareAsyncConsumeRaw(context, request, cq));
    }
    virtual ::grpc::Status Offset(::grpc::ClientContext* context, const ::GpssCluster::OffsetRequest& request, ::GpssCluster::OffsetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::OffsetResponse>> AsyncOffset(::grpc::ClientContext* context, const ::GpssCluster::OffsetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::OffsetResponse>>(AsyncOffsetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::OffsetResponse>> PrepareAsyncOffset(::grpc::ClientContext* context, const ::GpssCluster::OffsetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::OffsetResponse>>(PrepareAsyncOffsetRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Add(::grpc::ClientContext* context, const ::GpssCluster::AddRequest* request, ::GpssCluster::AddResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GpssCluster::AddResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Start(::grpc::ClientContext* context, const ::GpssCluster::StartRequest* request, ::GpssCluster::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GpssCluster::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::GpssCluster::StopRequest* request, ::GpssCluster::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GpssCluster::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::GpssCluster::DeleteRequest* request, ::GpssCluster::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GpssCluster::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Consume(::grpc::ClientContext* context, ::GpssCluster::ConsumeRequest* request, ::grpc::experimental::ClientReadReactor< ::GpssCluster::KafkaMessages>* reactor) = 0;
      virtual void Offset(::grpc::ClientContext* context, const ::GpssCluster::OffsetRequest* request, ::GpssCluster::OffsetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Offset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GpssCluster::OffsetResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::AddResponse>* AsyncAddRaw(::grpc::ClientContext* context, const ::GpssCluster::AddRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::AddResponse>* PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::GpssCluster::AddRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::Empty>* AsyncStartRaw(::grpc::ClientContext* context, const ::GpssCluster::StartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::Empty>* PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::GpssCluster::StartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::Empty>* AsyncStopRaw(::grpc::ClientContext* context, const ::GpssCluster::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::Empty>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::GpssCluster::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::Empty>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::GpssCluster::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::Empty>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::GpssCluster::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::GpssCluster::KafkaMessages>* ConsumeRaw(::grpc::ClientContext* context, const ::GpssCluster::ConsumeRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::GpssCluster::KafkaMessages>* AsyncConsumeRaw(::grpc::ClientContext* context, const ::GpssCluster::ConsumeRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::GpssCluster::KafkaMessages>* PrepareAsyncConsumeRaw(::grpc::ClientContext* context, const ::GpssCluster::ConsumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::OffsetResponse>* AsyncOffsetRaw(::grpc::ClientContext* context, const ::GpssCluster::OffsetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GpssCluster::OffsetResponse>* PrepareAsyncOffsetRaw(::grpc::ClientContext* context, const ::GpssCluster::OffsetRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Add(::grpc::ClientContext* context, const ::GpssCluster::AddRequest& request, ::GpssCluster::AddResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GpssCluster::AddResponse>> AsyncAdd(::grpc::ClientContext* context, const ::GpssCluster::AddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GpssCluster::AddResponse>>(AsyncAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GpssCluster::AddResponse>> PrepareAsyncAdd(::grpc::ClientContext* context, const ::GpssCluster::AddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GpssCluster::AddResponse>>(PrepareAsyncAddRaw(context, request, cq));
    }
    ::grpc::Status Start(::grpc::ClientContext* context, const ::GpssCluster::StartRequest& request, ::GpssCluster::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>> AsyncStart(::grpc::ClientContext* context, const ::GpssCluster::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>>(AsyncStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>> PrepareAsyncStart(::grpc::ClientContext* context, const ::GpssCluster::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>>(PrepareAsyncStartRaw(context, request, cq));
    }
    ::grpc::Status Stop(::grpc::ClientContext* context, const ::GpssCluster::StopRequest& request, ::GpssCluster::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>> AsyncStop(::grpc::ClientContext* context, const ::GpssCluster::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>> PrepareAsyncStop(::grpc::ClientContext* context, const ::GpssCluster::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>>(PrepareAsyncStopRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::GpssCluster::DeleteRequest& request, ::GpssCluster::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>> AsyncDelete(::grpc::ClientContext* context, const ::GpssCluster::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::GpssCluster::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::GpssCluster::KafkaMessages>> Consume(::grpc::ClientContext* context, const ::GpssCluster::ConsumeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::GpssCluster::KafkaMessages>>(ConsumeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::GpssCluster::KafkaMessages>> AsyncConsume(::grpc::ClientContext* context, const ::GpssCluster::ConsumeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::GpssCluster::KafkaMessages>>(AsyncConsumeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::GpssCluster::KafkaMessages>> PrepareAsyncConsume(::grpc::ClientContext* context, const ::GpssCluster::ConsumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::GpssCluster::KafkaMessages>>(PrepareAsyncConsumeRaw(context, request, cq));
    }
    ::grpc::Status Offset(::grpc::ClientContext* context, const ::GpssCluster::OffsetRequest& request, ::GpssCluster::OffsetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GpssCluster::OffsetResponse>> AsyncOffset(::grpc::ClientContext* context, const ::GpssCluster::OffsetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GpssCluster::OffsetResponse>>(AsyncOffsetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GpssCluster::OffsetResponse>> PrepareAsyncOffset(::grpc::ClientContext* context, const ::GpssCluster::OffsetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GpssCluster::OffsetResponse>>(PrepareAsyncOffsetRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Add(::grpc::ClientContext* context, const ::GpssCluster::AddRequest* request, ::GpssCluster::AddResponse* response, std::function<void(::grpc::Status)>) override;
      void Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GpssCluster::AddResponse* response, std::function<void(::grpc::Status)>) override;
      void Start(::grpc::ClientContext* context, const ::GpssCluster::StartRequest* request, ::GpssCluster::Empty* response, std::function<void(::grpc::Status)>) override;
      void Start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GpssCluster::Empty* response, std::function<void(::grpc::Status)>) override;
      void Stop(::grpc::ClientContext* context, const ::GpssCluster::StopRequest* request, ::GpssCluster::Empty* response, std::function<void(::grpc::Status)>) override;
      void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GpssCluster::Empty* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::GpssCluster::DeleteRequest* request, ::GpssCluster::Empty* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GpssCluster::Empty* response, std::function<void(::grpc::Status)>) override;
      void Consume(::grpc::ClientContext* context, ::GpssCluster::ConsumeRequest* request, ::grpc::experimental::ClientReadReactor< ::GpssCluster::KafkaMessages>* reactor) override;
      void Offset(::grpc::ClientContext* context, const ::GpssCluster::OffsetRequest* request, ::GpssCluster::OffsetResponse* response, std::function<void(::grpc::Status)>) override;
      void Offset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GpssCluster::OffsetResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::GpssCluster::AddResponse>* AsyncAddRaw(::grpc::ClientContext* context, const ::GpssCluster::AddRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GpssCluster::AddResponse>* PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::GpssCluster::AddRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>* AsyncStartRaw(::grpc::ClientContext* context, const ::GpssCluster::StartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>* PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::GpssCluster::StartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>* AsyncStopRaw(::grpc::ClientContext* context, const ::GpssCluster::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::GpssCluster::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::GpssCluster::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GpssCluster::Empty>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::GpssCluster::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::GpssCluster::KafkaMessages>* ConsumeRaw(::grpc::ClientContext* context, const ::GpssCluster::ConsumeRequest& request) override;
    ::grpc::ClientAsyncReader< ::GpssCluster::KafkaMessages>* AsyncConsumeRaw(::grpc::ClientContext* context, const ::GpssCluster::ConsumeRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::GpssCluster::KafkaMessages>* PrepareAsyncConsumeRaw(::grpc::ClientContext* context, const ::GpssCluster::ConsumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GpssCluster::OffsetResponse>* AsyncOffsetRaw(::grpc::ClientContext* context, const ::GpssCluster::OffsetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GpssCluster::OffsetResponse>* PrepareAsyncOffsetRaw(::grpc::ClientContext* context, const ::GpssCluster::OffsetRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Add_;
    const ::grpc::internal::RpcMethod rpcmethod_Start_;
    const ::grpc::internal::RpcMethod rpcmethod_Stop_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_Consume_;
    const ::grpc::internal::RpcMethod rpcmethod_Offset_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Add(::grpc::ServerContext* context, const ::GpssCluster::AddRequest* request, ::GpssCluster::AddResponse* response);
    virtual ::grpc::Status Start(::grpc::ServerContext* context, const ::GpssCluster::StartRequest* request, ::GpssCluster::Empty* response);
    virtual ::grpc::Status Stop(::grpc::ServerContext* context, const ::GpssCluster::StopRequest* request, ::GpssCluster::Empty* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::GpssCluster::DeleteRequest* request, ::GpssCluster::Empty* response);
    virtual ::grpc::Status Consume(::grpc::ServerContext* context, const ::GpssCluster::ConsumeRequest* request, ::grpc::ServerWriter< ::GpssCluster::KafkaMessages>* writer);
    virtual ::grpc::Status Offset(::grpc::ServerContext* context, const ::GpssCluster::OffsetRequest* request, ::GpssCluster::OffsetResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Add() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* context, const ::GpssCluster::AddRequest* request, ::GpssCluster::AddResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdd(::grpc::ServerContext* context, ::GpssCluster::AddRequest* request, ::grpc::ServerAsyncResponseWriter< ::GpssCluster::AddResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Start() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* context, const ::GpssCluster::StartRequest* request, ::GpssCluster::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStart(::grpc::ServerContext* context, ::GpssCluster::StartRequest* request, ::grpc::ServerAsyncResponseWriter< ::GpssCluster::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Stop() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::GpssCluster::StopRequest* request, ::GpssCluster::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::GpssCluster::StopRequest* request, ::grpc::ServerAsyncResponseWriter< ::GpssCluster::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::GpssCluster::DeleteRequest* request, ::GpssCluster::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::GpssCluster::DeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::GpssCluster::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Consume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Consume() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Consume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Consume(::grpc::ServerContext* context, const ::GpssCluster::ConsumeRequest* request, ::grpc::ServerWriter< ::GpssCluster::KafkaMessages>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsume(::grpc::ServerContext* context, ::GpssCluster::ConsumeRequest* request, ::grpc::ServerAsyncWriter< ::GpssCluster::KafkaMessages>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Offset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Offset() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Offset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Offset(::grpc::ServerContext* context, const ::GpssCluster::OffsetRequest* request, ::GpssCluster::OffsetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOffset(::grpc::ServerContext* context, ::GpssCluster::OffsetRequest* request, ::grpc::ServerAsyncResponseWriter< ::GpssCluster::OffsetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Add<WithAsyncMethod_Start<WithAsyncMethod_Stop<WithAsyncMethod_Delete<WithAsyncMethod_Consume<WithAsyncMethod_Offset<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Add() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::GpssCluster::AddRequest, ::GpssCluster::AddResponse>(
          [this](::grpc::ServerContext* context,
                 const ::GpssCluster::AddRequest* request,
                 ::GpssCluster::AddResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Add(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* context, const ::GpssCluster::AddRequest* request, ::GpssCluster::AddResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Add(::grpc::ServerContext* context, const ::GpssCluster::AddRequest* request, ::GpssCluster::AddResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Start() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::GpssCluster::StartRequest, ::GpssCluster::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::GpssCluster::StartRequest* request,
                 ::GpssCluster::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Start(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* context, const ::GpssCluster::StartRequest* request, ::GpssCluster::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Start(::grpc::ServerContext* context, const ::GpssCluster::StartRequest* request, ::GpssCluster::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Stop() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::GpssCluster::StopRequest, ::GpssCluster::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::GpssCluster::StopRequest* request,
                 ::GpssCluster::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Stop(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::GpssCluster::StopRequest* request, ::GpssCluster::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Stop(::grpc::ServerContext* context, const ::GpssCluster::StopRequest* request, ::GpssCluster::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Delete() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::GpssCluster::DeleteRequest, ::GpssCluster::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::GpssCluster::DeleteRequest* request,
                 ::GpssCluster::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Delete(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::GpssCluster::DeleteRequest* request, ::GpssCluster::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Delete(::grpc::ServerContext* context, const ::GpssCluster::DeleteRequest* request, ::GpssCluster::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Consume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Consume() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackServerStreamingHandler< ::GpssCluster::ConsumeRequest, ::GpssCluster::KafkaMessages>(
          [this] { return this->Consume(); }));
    }
    ~ExperimentalWithCallbackMethod_Consume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Consume(::grpc::ServerContext* context, const ::GpssCluster::ConsumeRequest* request, ::grpc::ServerWriter< ::GpssCluster::KafkaMessages>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::GpssCluster::ConsumeRequest, ::GpssCluster::KafkaMessages>* Consume() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::GpssCluster::ConsumeRequest, ::GpssCluster::KafkaMessages>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Offset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Offset() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::GpssCluster::OffsetRequest, ::GpssCluster::OffsetResponse>(
          [this](::grpc::ServerContext* context,
                 const ::GpssCluster::OffsetRequest* request,
                 ::GpssCluster::OffsetResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Offset(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Offset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Offset(::grpc::ServerContext* context, const ::GpssCluster::OffsetRequest* request, ::GpssCluster::OffsetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Offset(::grpc::ServerContext* context, const ::GpssCluster::OffsetRequest* request, ::GpssCluster::OffsetResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Add<ExperimentalWithCallbackMethod_Start<ExperimentalWithCallbackMethod_Stop<ExperimentalWithCallbackMethod_Delete<ExperimentalWithCallbackMethod_Consume<ExperimentalWithCallbackMethod_Offset<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Add() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* context, const ::GpssCluster::AddRequest* request, ::GpssCluster::AddResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Start() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* context, const ::GpssCluster::StartRequest* request, ::GpssCluster::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Stop() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::GpssCluster::StopRequest* request, ::GpssCluster::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::GpssCluster::DeleteRequest* request, ::GpssCluster::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Consume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Consume() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Consume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Consume(::grpc::ServerContext* context, const ::GpssCluster::ConsumeRequest* request, ::grpc::ServerWriter< ::GpssCluster::KafkaMessages>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Offset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Offset() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Offset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Offset(::grpc::ServerContext* context, const ::GpssCluster::OffsetRequest* request, ::GpssCluster::OffsetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Add() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* context, const ::GpssCluster::AddRequest* request, ::GpssCluster::AddResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdd(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Start() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* context, const ::GpssCluster::StartRequest* request, ::GpssCluster::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Stop() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::GpssCluster::StopRequest* request, ::GpssCluster::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::GpssCluster::DeleteRequest* request, ::GpssCluster::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Consume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Consume() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Consume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Consume(::grpc::ServerContext* context, const ::GpssCluster::ConsumeRequest* request, ::grpc::ServerWriter< ::GpssCluster::KafkaMessages>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsume(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Offset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Offset() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Offset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Offset(::grpc::ServerContext* context, const ::GpssCluster::OffsetRequest* request, ::GpssCluster::OffsetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOffset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Add() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Add(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* context, const ::GpssCluster::AddRequest* request, ::GpssCluster::AddResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Add(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Start() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Start(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* context, const ::GpssCluster::StartRequest* request, ::GpssCluster::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Start(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Stop() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Stop(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::GpssCluster::StopRequest* request, ::GpssCluster::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Stop(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Delete() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Delete(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::GpssCluster::DeleteRequest* request, ::GpssCluster::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Delete(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Consume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Consume() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Consume(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Consume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Consume(::grpc::ServerContext* context, const ::GpssCluster::ConsumeRequest* request, ::grpc::ServerWriter< ::GpssCluster::KafkaMessages>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Consume() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Offset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Offset() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Offset(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Offset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Offset(::grpc::ServerContext* context, const ::GpssCluster::OffsetRequest* request, ::GpssCluster::OffsetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Offset(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Add() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::GpssCluster::AddRequest, ::GpssCluster::AddResponse>(std::bind(&WithStreamedUnaryMethod_Add<BaseClass>::StreamedAdd, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Add(::grpc::ServerContext* context, const ::GpssCluster::AddRequest* request, ::GpssCluster::AddResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAdd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GpssCluster::AddRequest,::GpssCluster::AddResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Start() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::GpssCluster::StartRequest, ::GpssCluster::Empty>(std::bind(&WithStreamedUnaryMethod_Start<BaseClass>::StreamedStart, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Start(::grpc::ServerContext* context, const ::GpssCluster::StartRequest* request, ::GpssCluster::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GpssCluster::StartRequest,::GpssCluster::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Stop() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::GpssCluster::StopRequest, ::GpssCluster::Empty>(std::bind(&WithStreamedUnaryMethod_Stop<BaseClass>::StreamedStop, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::GpssCluster::StopRequest* request, ::GpssCluster::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GpssCluster::StopRequest,::GpssCluster::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::GpssCluster::DeleteRequest, ::GpssCluster::Empty>(std::bind(&WithStreamedUnaryMethod_Delete<BaseClass>::StreamedDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::GpssCluster::DeleteRequest* request, ::GpssCluster::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GpssCluster::DeleteRequest,::GpssCluster::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Offset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Offset() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::GpssCluster::OffsetRequest, ::GpssCluster::OffsetResponse>(std::bind(&WithStreamedUnaryMethod_Offset<BaseClass>::StreamedOffset, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Offset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Offset(::grpc::ServerContext* context, const ::GpssCluster::OffsetRequest* request, ::GpssCluster::OffsetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOffset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GpssCluster::OffsetRequest,::GpssCluster::OffsetResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Add<WithStreamedUnaryMethod_Start<WithStreamedUnaryMethod_Stop<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Offset<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Consume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Consume() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler< ::GpssCluster::ConsumeRequest, ::GpssCluster::KafkaMessages>(std::bind(&WithSplitStreamingMethod_Consume<BaseClass>::StreamedConsume, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Consume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Consume(::grpc::ServerContext* context, const ::GpssCluster::ConsumeRequest* request, ::grpc::ServerWriter< ::GpssCluster::KafkaMessages>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedConsume(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::GpssCluster::ConsumeRequest,::GpssCluster::KafkaMessages>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Consume<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Add<WithStreamedUnaryMethod_Start<WithStreamedUnaryMethod_Stop<WithStreamedUnaryMethod_Delete<WithSplitStreamingMethod_Consume<WithStreamedUnaryMethod_Offset<Service > > > > > > StreamedService;
};

}  // namespace GpssCluster


#endif  // GRPC_stream_2eproto__INCLUDED
